{"version":3,"file":"useLiveQuery.js","sources":["../../src/live-query/useLiveQuery.ts"],"sourcesContent":["// This is a smaller version of `useLiveQuery`, as `LiveQuery` doesn't\n// need the more advanced features `useLiveQuery`, like the `isEqual` option or the `loading` state\n\nimport type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport { useQueryParams } from '@sanity/preview-kit-compat'\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  useSyncExternalStore,\n} from 'react'\n\nimport { defineStoreContext } from '../context'\nimport { QueryEnabled } from '../types'\n\n/** @internal */\nexport function useLiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  initialData: QueryResult,\n  query: string,\n  queryParams2?: QueryParams,\n): [QueryResult, QueryEnabled] {\n  const defineStore = useContext(defineStoreContext)\n  const queryParams = useQueryParams(queryParams2)\n  const store = useMemo(\n    () => defineStore?.<QueryResult>(initialData, query, queryParams),\n    [defineStore, initialData, queryParams, query],\n  )\n  // initialSnapshot might change before hydration is done, so deep cloning it on the first hook call\n  // helps ensure that we don't get a mismatch between the server and client snapshots\n  const [serverSnapshot] = useState(() => {\n    if (initialData === undefined) {\n      throw new Error(\n        `initialSnapshot can't be undefined, if you don't want an initial value use null instead`,\n      )\n    }\n    try {\n      return JSON.parse(JSON.stringify(initialData))\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable\",\n        { initialSnapshot: initialData, error },\n      )\n      return initialData\n    }\n  })\n  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot])\n\n  return [\n    useSyncExternalStore(\n      store?.subscribe || noop,\n      store?.getSnapshot || getServerSnapshot,\n      getServerSnapshot,\n    ),\n    defineStore !== null,\n  ]\n}\n\nfunction noop() {\n  return () => {}\n}\n"],"names":["useLiveQuery","initialData","query","queryParams2","defineStore","useContext","defineStoreContext","queryParams","useQueryParams","store","useMemo","serverSnapshot","useState","Error","JSON","parse","stringify","error","console","warn","initialSnapshot","getServerSnapshot","useCallback","useSyncExternalStore","subscribe","noop","getSnapshot"],"mappings":"wNAiBgB,SAAAA,EAIdC,EACAC,EACAC,GAEM,MAAAC,EAAcC,EAAWC,GACzBC,EAAcC,EAAeL,GAC7BM,EAAQC,GACZ,IAAiC,MAA3BN,OAA2B,EAAAA,EAAAH,EAAaC,EAAOK,IACrD,CAACH,EAAaH,EAAaM,EAAaL,KAInCS,GAAkBC,GAAS,KAChC,QAAoB,IAAhBX,EACF,MAAM,IAAIY,MACR,2FAGA,IACF,OAAOC,KAAKC,MAAMD,KAAKE,UAAUf,UAC1BgB,GAMA,OAJCC,QAAAC,KACN,4HACA,CAAEC,gBAAiBnB,EAAagB,UAE3BhB,CACT,KAEIoB,EAAoBC,GAAY,IAAMX,GAAgB,CAACA,IAEtD,MAAA,CACLY,SACEd,WAAOe,YAAaC,SACpBhB,WAAOiB,cAAeL,EACtBA,GAEc,OAAhBjB,EAEJ,CAEA,SAASqB,IACP,MAAO,MACT"}